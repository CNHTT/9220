package com.odd.sportal.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.odd.sportal.model.EventLiveModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVENT_LIVE_MODEL".
*/
public class EventLiveModelDao extends AbstractDao<EventLiveModel, Long> {

    public static final String TABLENAME = "EVENT_LIVE_MODEL";

    /**
     * Properties of entity EventLiveModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EVENT_ID = new Property(1, long.class, "EVENT_ID", false, "EVENT__ID");
        public final static Property EVENT_CODE = new Property(2, long.class, "EVENT_CODE", false, "EVENT__CODE");
        public final static Property BET_START_DATE = new Property(3, java.util.Date.class, "BET_START_DATE", false, "BET__START__DATE");
        public final static Property SCD_DATE = new Property(4, java.util.Date.class, "SCD_DATE", false, "SCD__DATE");
        public final static Property ACTUAL_DATE = new Property(5, java.util.Date.class, "ACTUAL_DATE", false, "ACTUAL__DATE");
        public final static Property STATUS = new Property(6, long.class, "STATUS", false, "STATUS");
        public final static Property TEAM1_ID = new Property(7, long.class, "TEAM1_ID", false, "TEAM1__ID");
        public final static Property TEAM2_ID = new Property(8, long.class, "TEAM2_ID", false, "TEAM2__ID");
        public final static Property DISPLAY_DATE = new Property(9, java.util.Date.class, "DISPLAY_DATE", false, "DISPLAY__DATE");
        public final static Property DRAW_ID = new Property(10, long.class, "DRAW_ID", false, "DRAW__ID");
        public final static Property TOURN_ID = new Property(11, long.class, "TOURN_ID", false, "TOURN__ID");
        public final static Property EVENT_TYPE = new Property(12, long.class, "EVENT_TYPE", false, "EVENT__TYPE");
        public final static Property LOTOS_CODE = new Property(13, long.class, "LOTOS_CODE", false, "LOTOS__CODE");
        public final static Property EVT_COMMENT_UNC = new Property(14, String.class, "EVT_COMMENT_UNC", false, "EVT__COMMENT__UNC");
        public final static Property USE_CLM_LEN = new Property(15, long.class, "USE_CLM_LEN", false, "USE__CLM__LEN");
        public final static Property ODDS_1 = new Property(16, double.class, "ODDS_1", false, "ODDS_1");
        public final static Property ODDS_X = new Property(17, double.class, "ODDS_X", false, "ODDS__X");
        public final static Property HANDICAP2 = new Property(18, double.class, "HANDICAP2", false, "HANDICAP2");
        public final static Property ODDS_2 = new Property(19, double.class, "ODDS_2", false, "ODDS_2");
        public final static Property HANDICAP1 = new Property(20, double.class, "HANDICAP1", false, "HANDICAP1");
        public final static Property ET_NAME = new Property(21, String.class, "ET_NAME", false, "ET__NAME");
        public final static Property ET_CODE = new Property(22, String.class, "ET_CODE", false, "ET__CODE");
        public final static Property ET_DESCR_EN = new Property(23, String.class, "ET_DESCR_EN", false, "ET__DESCR__EN");
        public final static Property TNAME = new Property(24, String.class, "TNAME", false, "TNAME");
        public final static Property TORDER = new Property(25, long.class, "TORDER", false, "TORDER");
        public final static Property TWEB_ID = new Property(26, long.class, "TWEB_ID", false, "TWEB__ID");
        public final static Property TEAM1_NAME = new Property(27, String.class, "TEAM1_NAME", false, "TEAM1__NAME");
        public final static Property TEAM2_NAME = new Property(28, String.class, "TEAM2_NAME", false, "TEAM2__NAME");
        public final static Property FILE_NAME = new Property(29, String.class, "FILE_NAME", false, "FILE__NAME");
        public final static Property ISPLAYED = new Property(30, long.class, "ISPLAYED", false, "ISPLAYED");
        public final static Property LIVE_DT = new Property(31, java.util.Date.class, "LIVE_DT", false, "LIVE__DT");
        public final static Property DISCIPLINE_ID = new Property(32, long.class, "DISCIPLINE_ID", false, "DISCIPLINE__ID");
        public final static Property SPORTS_IMAGE = new Property(33, String.class, "SPORTS_IMAGE", false, "SPORTS__IMAGE");
        public final static Property SPORT_ORDER = new Property(34, long.class, "SPORT_ORDER", false, "SPORT__ORDER");
        public final static Property ANTEPOST = new Property(35, long.class, "ANTEPOST", false, "ANTEPOST");
        public final static Property TOURN_ORDER = new Property(36, long.class, "TOURN_ORDER", false, "TOURN__ORDER");
    }


    public EventLiveModelDao(DaoConfig config) {
        super(config);
    }
    
    public EventLiveModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVENT_LIVE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EVENT__ID\" INTEGER NOT NULL ," + // 1: EVENT_ID
                "\"EVENT__CODE\" INTEGER NOT NULL ," + // 2: EVENT_CODE
                "\"BET__START__DATE\" INTEGER," + // 3: BET_START_DATE
                "\"SCD__DATE\" INTEGER," + // 4: SCD_DATE
                "\"ACTUAL__DATE\" INTEGER," + // 5: ACTUAL_DATE
                "\"STATUS\" INTEGER NOT NULL ," + // 6: STATUS
                "\"TEAM1__ID\" INTEGER NOT NULL ," + // 7: TEAM1_ID
                "\"TEAM2__ID\" INTEGER NOT NULL ," + // 8: TEAM2_ID
                "\"DISPLAY__DATE\" INTEGER," + // 9: DISPLAY_DATE
                "\"DRAW__ID\" INTEGER NOT NULL ," + // 10: DRAW_ID
                "\"TOURN__ID\" INTEGER NOT NULL ," + // 11: TOURN_ID
                "\"EVENT__TYPE\" INTEGER NOT NULL ," + // 12: EVENT_TYPE
                "\"LOTOS__CODE\" INTEGER NOT NULL ," + // 13: LOTOS_CODE
                "\"EVT__COMMENT__UNC\" TEXT," + // 14: EVT_COMMENT_UNC
                "\"USE__CLM__LEN\" INTEGER NOT NULL ," + // 15: USE_CLM_LEN
                "\"ODDS_1\" REAL NOT NULL ," + // 16: ODDS_1
                "\"ODDS__X\" REAL NOT NULL ," + // 17: ODDS_X
                "\"HANDICAP2\" REAL NOT NULL ," + // 18: HANDICAP2
                "\"ODDS_2\" REAL NOT NULL ," + // 19: ODDS_2
                "\"HANDICAP1\" REAL NOT NULL ," + // 20: HANDICAP1
                "\"ET__NAME\" TEXT," + // 21: ET_NAME
                "\"ET__CODE\" TEXT," + // 22: ET_CODE
                "\"ET__DESCR__EN\" TEXT," + // 23: ET_DESCR_EN
                "\"TNAME\" TEXT," + // 24: TNAME
                "\"TORDER\" INTEGER NOT NULL ," + // 25: TORDER
                "\"TWEB__ID\" INTEGER NOT NULL ," + // 26: TWEB_ID
                "\"TEAM1__NAME\" TEXT," + // 27: TEAM1_NAME
                "\"TEAM2__NAME\" TEXT," + // 28: TEAM2_NAME
                "\"FILE__NAME\" TEXT," + // 29: FILE_NAME
                "\"ISPLAYED\" INTEGER NOT NULL ," + // 30: ISPLAYED
                "\"LIVE__DT\" INTEGER," + // 31: LIVE_DT
                "\"DISCIPLINE__ID\" INTEGER NOT NULL ," + // 32: DISCIPLINE_ID
                "\"SPORTS__IMAGE\" TEXT," + // 33: SPORTS_IMAGE
                "\"SPORT__ORDER\" INTEGER NOT NULL ," + // 34: SPORT_ORDER
                "\"ANTEPOST\" INTEGER NOT NULL ," + // 35: ANTEPOST
                "\"TOURN__ORDER\" INTEGER NOT NULL );"); // 36: TOURN_ORDER
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENT_LIVE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EventLiveModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEVENT_ID());
        stmt.bindLong(3, entity.getEVENT_CODE());
 
        java.util.Date BET_START_DATE = entity.getBET_START_DATE();
        if (BET_START_DATE != null) {
            stmt.bindLong(4, BET_START_DATE.getTime());
        }
 
        java.util.Date SCD_DATE = entity.getSCD_DATE();
        if (SCD_DATE != null) {
            stmt.bindLong(5, SCD_DATE.getTime());
        }
 
        java.util.Date ACTUAL_DATE = entity.getACTUAL_DATE();
        if (ACTUAL_DATE != null) {
            stmt.bindLong(6, ACTUAL_DATE.getTime());
        }
        stmt.bindLong(7, entity.getSTATUS());
        stmt.bindLong(8, entity.getTEAM1_ID());
        stmt.bindLong(9, entity.getTEAM2_ID());
 
        java.util.Date DISPLAY_DATE = entity.getDISPLAY_DATE();
        if (DISPLAY_DATE != null) {
            stmt.bindLong(10, DISPLAY_DATE.getTime());
        }
        stmt.bindLong(11, entity.getDRAW_ID());
        stmt.bindLong(12, entity.getTOURN_ID());
        stmt.bindLong(13, entity.getEVENT_TYPE());
        stmt.bindLong(14, entity.getLOTOS_CODE());
 
        String EVT_COMMENT_UNC = entity.getEVT_COMMENT_UNC();
        if (EVT_COMMENT_UNC != null) {
            stmt.bindString(15, EVT_COMMENT_UNC);
        }
        stmt.bindLong(16, entity.getUSE_CLM_LEN());
        stmt.bindDouble(17, entity.getODDS_1());
        stmt.bindDouble(18, entity.getODDS_X());
        stmt.bindDouble(19, entity.getHANDICAP2());
        stmt.bindDouble(20, entity.getODDS_2());
        stmt.bindDouble(21, entity.getHANDICAP1());
 
        String ET_NAME = entity.getET_NAME();
        if (ET_NAME != null) {
            stmt.bindString(22, ET_NAME);
        }
 
        String ET_CODE = entity.getET_CODE();
        if (ET_CODE != null) {
            stmt.bindString(23, ET_CODE);
        }
 
        String ET_DESCR_EN = entity.getET_DESCR_EN();
        if (ET_DESCR_EN != null) {
            stmt.bindString(24, ET_DESCR_EN);
        }
 
        String TNAME = entity.getTNAME();
        if (TNAME != null) {
            stmt.bindString(25, TNAME);
        }
        stmt.bindLong(26, entity.getTORDER());
        stmt.bindLong(27, entity.getTWEB_ID());
 
        String TEAM1_NAME = entity.getTEAM1_NAME();
        if (TEAM1_NAME != null) {
            stmt.bindString(28, TEAM1_NAME);
        }
 
        String TEAM2_NAME = entity.getTEAM2_NAME();
        if (TEAM2_NAME != null) {
            stmt.bindString(29, TEAM2_NAME);
        }
 
        String FILE_NAME = entity.getFILE_NAME();
        if (FILE_NAME != null) {
            stmt.bindString(30, FILE_NAME);
        }
        stmt.bindLong(31, entity.getISPLAYED());
 
        java.util.Date LIVE_DT = entity.getLIVE_DT();
        if (LIVE_DT != null) {
            stmt.bindLong(32, LIVE_DT.getTime());
        }
        stmt.bindLong(33, entity.getDISCIPLINE_ID());
 
        String SPORTS_IMAGE = entity.getSPORTS_IMAGE();
        if (SPORTS_IMAGE != null) {
            stmt.bindString(34, SPORTS_IMAGE);
        }
        stmt.bindLong(35, entity.getSPORT_ORDER());
        stmt.bindLong(36, entity.getANTEPOST());
        stmt.bindLong(37, entity.getTOURN_ORDER());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EventLiveModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEVENT_ID());
        stmt.bindLong(3, entity.getEVENT_CODE());
 
        java.util.Date BET_START_DATE = entity.getBET_START_DATE();
        if (BET_START_DATE != null) {
            stmt.bindLong(4, BET_START_DATE.getTime());
        }
 
        java.util.Date SCD_DATE = entity.getSCD_DATE();
        if (SCD_DATE != null) {
            stmt.bindLong(5, SCD_DATE.getTime());
        }
 
        java.util.Date ACTUAL_DATE = entity.getACTUAL_DATE();
        if (ACTUAL_DATE != null) {
            stmt.bindLong(6, ACTUAL_DATE.getTime());
        }
        stmt.bindLong(7, entity.getSTATUS());
        stmt.bindLong(8, entity.getTEAM1_ID());
        stmt.bindLong(9, entity.getTEAM2_ID());
 
        java.util.Date DISPLAY_DATE = entity.getDISPLAY_DATE();
        if (DISPLAY_DATE != null) {
            stmt.bindLong(10, DISPLAY_DATE.getTime());
        }
        stmt.bindLong(11, entity.getDRAW_ID());
        stmt.bindLong(12, entity.getTOURN_ID());
        stmt.bindLong(13, entity.getEVENT_TYPE());
        stmt.bindLong(14, entity.getLOTOS_CODE());
 
        String EVT_COMMENT_UNC = entity.getEVT_COMMENT_UNC();
        if (EVT_COMMENT_UNC != null) {
            stmt.bindString(15, EVT_COMMENT_UNC);
        }
        stmt.bindLong(16, entity.getUSE_CLM_LEN());
        stmt.bindDouble(17, entity.getODDS_1());
        stmt.bindDouble(18, entity.getODDS_X());
        stmt.bindDouble(19, entity.getHANDICAP2());
        stmt.bindDouble(20, entity.getODDS_2());
        stmt.bindDouble(21, entity.getHANDICAP1());
 
        String ET_NAME = entity.getET_NAME();
        if (ET_NAME != null) {
            stmt.bindString(22, ET_NAME);
        }
 
        String ET_CODE = entity.getET_CODE();
        if (ET_CODE != null) {
            stmt.bindString(23, ET_CODE);
        }
 
        String ET_DESCR_EN = entity.getET_DESCR_EN();
        if (ET_DESCR_EN != null) {
            stmt.bindString(24, ET_DESCR_EN);
        }
 
        String TNAME = entity.getTNAME();
        if (TNAME != null) {
            stmt.bindString(25, TNAME);
        }
        stmt.bindLong(26, entity.getTORDER());
        stmt.bindLong(27, entity.getTWEB_ID());
 
        String TEAM1_NAME = entity.getTEAM1_NAME();
        if (TEAM1_NAME != null) {
            stmt.bindString(28, TEAM1_NAME);
        }
 
        String TEAM2_NAME = entity.getTEAM2_NAME();
        if (TEAM2_NAME != null) {
            stmt.bindString(29, TEAM2_NAME);
        }
 
        String FILE_NAME = entity.getFILE_NAME();
        if (FILE_NAME != null) {
            stmt.bindString(30, FILE_NAME);
        }
        stmt.bindLong(31, entity.getISPLAYED());
 
        java.util.Date LIVE_DT = entity.getLIVE_DT();
        if (LIVE_DT != null) {
            stmt.bindLong(32, LIVE_DT.getTime());
        }
        stmt.bindLong(33, entity.getDISCIPLINE_ID());
 
        String SPORTS_IMAGE = entity.getSPORTS_IMAGE();
        if (SPORTS_IMAGE != null) {
            stmt.bindString(34, SPORTS_IMAGE);
        }
        stmt.bindLong(35, entity.getSPORT_ORDER());
        stmt.bindLong(36, entity.getANTEPOST());
        stmt.bindLong(37, entity.getTOURN_ORDER());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EventLiveModel readEntity(Cursor cursor, int offset) {
        EventLiveModel entity = new EventLiveModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // EVENT_ID
            cursor.getLong(offset + 2), // EVENT_CODE
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // BET_START_DATE
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // SCD_DATE
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // ACTUAL_DATE
            cursor.getLong(offset + 6), // STATUS
            cursor.getLong(offset + 7), // TEAM1_ID
            cursor.getLong(offset + 8), // TEAM2_ID
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // DISPLAY_DATE
            cursor.getLong(offset + 10), // DRAW_ID
            cursor.getLong(offset + 11), // TOURN_ID
            cursor.getLong(offset + 12), // EVENT_TYPE
            cursor.getLong(offset + 13), // LOTOS_CODE
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // EVT_COMMENT_UNC
            cursor.getLong(offset + 15), // USE_CLM_LEN
            cursor.getDouble(offset + 16), // ODDS_1
            cursor.getDouble(offset + 17), // ODDS_X
            cursor.getDouble(offset + 18), // HANDICAP2
            cursor.getDouble(offset + 19), // ODDS_2
            cursor.getDouble(offset + 20), // HANDICAP1
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // ET_NAME
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // ET_CODE
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // ET_DESCR_EN
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // TNAME
            cursor.getLong(offset + 25), // TORDER
            cursor.getLong(offset + 26), // TWEB_ID
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // TEAM1_NAME
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // TEAM2_NAME
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // FILE_NAME
            cursor.getLong(offset + 30), // ISPLAYED
            cursor.isNull(offset + 31) ? null : new java.util.Date(cursor.getLong(offset + 31)), // LIVE_DT
            cursor.getLong(offset + 32), // DISCIPLINE_ID
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // SPORTS_IMAGE
            cursor.getLong(offset + 34), // SPORT_ORDER
            cursor.getLong(offset + 35), // ANTEPOST
            cursor.getLong(offset + 36) // TOURN_ORDER
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EventLiveModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEVENT_ID(cursor.getLong(offset + 1));
        entity.setEVENT_CODE(cursor.getLong(offset + 2));
        entity.setBET_START_DATE(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setSCD_DATE(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setACTUAL_DATE(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setSTATUS(cursor.getLong(offset + 6));
        entity.setTEAM1_ID(cursor.getLong(offset + 7));
        entity.setTEAM2_ID(cursor.getLong(offset + 8));
        entity.setDISPLAY_DATE(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setDRAW_ID(cursor.getLong(offset + 10));
        entity.setTOURN_ID(cursor.getLong(offset + 11));
        entity.setEVENT_TYPE(cursor.getLong(offset + 12));
        entity.setLOTOS_CODE(cursor.getLong(offset + 13));
        entity.setEVT_COMMENT_UNC(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUSE_CLM_LEN(cursor.getLong(offset + 15));
        entity.setODDS_1(cursor.getDouble(offset + 16));
        entity.setODDS_X(cursor.getDouble(offset + 17));
        entity.setHANDICAP2(cursor.getDouble(offset + 18));
        entity.setODDS_2(cursor.getDouble(offset + 19));
        entity.setHANDICAP1(cursor.getDouble(offset + 20));
        entity.setET_NAME(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setET_CODE(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setET_DESCR_EN(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setTNAME(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setTORDER(cursor.getLong(offset + 25));
        entity.setTWEB_ID(cursor.getLong(offset + 26));
        entity.setTEAM1_NAME(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setTEAM2_NAME(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setFILE_NAME(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setISPLAYED(cursor.getLong(offset + 30));
        entity.setLIVE_DT(cursor.isNull(offset + 31) ? null : new java.util.Date(cursor.getLong(offset + 31)));
        entity.setDISCIPLINE_ID(cursor.getLong(offset + 32));
        entity.setSPORTS_IMAGE(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setSPORT_ORDER(cursor.getLong(offset + 34));
        entity.setANTEPOST(cursor.getLong(offset + 35));
        entity.setTOURN_ORDER(cursor.getLong(offset + 36));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EventLiveModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EventLiveModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EventLiveModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
