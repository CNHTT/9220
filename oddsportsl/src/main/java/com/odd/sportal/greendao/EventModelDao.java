package com.odd.sportal.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.odd.sportal.model.EventModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVENT_MODEL".
*/
public class EventModelDao extends AbstractDao<EventModel, Long> {

    public static final String TABLENAME = "EVENT_MODEL";

    /**
     * Properties of entity EventModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LIVE_DT = new Property(1, java.util.Date.class, "LIVE_DT", false, "LIVE__DT");
        public final static Property ISPLAYED = new Property(2, long.class, "ISPLAYED", false, "ISPLAYED");
        public final static Property FILE_NAME = new Property(3, String.class, "FILE_NAME", false, "FILE__NAME");
        public final static Property TEAM2_NAME = new Property(4, String.class, "TEAM2_NAME", false, "TEAM2__NAME");
        public final static Property TEAM1_NAME = new Property(5, String.class, "TEAM1_NAME", false, "TEAM1__NAME");
        public final static Property TNAME = new Property(6, String.class, "TNAME", false, "TNAME");
        public final static Property ET_DESCR_EN = new Property(7, String.class, "ET_DESCR_EN", false, "ET__DESCR__EN");
        public final static Property ET_NAME = new Property(8, String.class, "ET_NAME", false, "ET__NAME");
        public final static Property HANDICAP2 = new Property(9, double.class, "HANDICAP2", false, "HANDICAP2");
        public final static Property HANDICAP1 = new Property(10, double.class, "HANDICAP1", false, "HANDICAP1");
        public final static Property ODDS_2 = new Property(11, double.class, "ODDS_2", false, "ODDS_2");
        public final static Property ODDS_X = new Property(12, double.class, "ODDS_X", false, "ODDS__X");
        public final static Property ODDS_1 = new Property(13, double.class, "ODDS_1", false, "ODDS_1");
        public final static Property USE_CLM_LEN = new Property(14, long.class, "USE_CLM_LEN", false, "USE__CLM__LEN");
        public final static Property EVT_COMMENT_UNC = new Property(15, String.class, "EVT_COMMENT_UNC", false, "EVT__COMMENT__UNC");
        public final static Property LOTOS_CODE = new Property(16, long.class, "LOTOS_CODE", false, "LOTOS__CODE");
        public final static Property EVENT_TYPE = new Property(17, long.class, "EVENT_TYPE", false, "EVENT__TYPE");
        public final static Property TOURN_ID = new Property(18, long.class, "TOURN_ID", false, "TOURN__ID");
        public final static Property DRAW_ID = new Property(19, long.class, "DRAW_ID", false, "DRAW__ID");
        public final static Property DISPLAY_ORDER = new Property(20, long.class, "DISPLAY_ORDER", false, "DISPLAY__ORDER");
        public final static Property DISPLAY_DATE = new Property(21, java.util.Date.class, "DISPLAY_DATE", false, "DISPLAY__DATE");
        public final static Property TEAM2_ID = new Property(22, long.class, "TEAM2_ID", false, "TEAM2__ID");
        public final static Property TEAM1_ID = new Property(23, long.class, "TEAM1_ID", false, "TEAM1__ID");
        public final static Property STATUS = new Property(24, long.class, "STATUS", false, "STATUS");
        public final static Property ACTUAL_DATE = new Property(25, java.util.Date.class, "ACTUAL_DATE", false, "ACTUAL__DATE");
        public final static Property SCD_DATE = new Property(26, java.util.Date.class, "SCD_DATE", false, "SCD__DATE");
        public final static Property BET_START_DATE = new Property(27, java.util.Date.class, "BET_START_DATE", false, "BET__START__DATE");
        public final static Property EVENT_CODE = new Property(28, long.class, "EVENT_CODE", false, "EVENT__CODE");
        public final static Property EVENT_ID = new Property(29, long.class, "EVENT_ID", false, "EVENT__ID");
    }


    public EventModelDao(DaoConfig config) {
        super(config);
    }
    
    public EventModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVENT_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LIVE__DT\" INTEGER," + // 1: LIVE_DT
                "\"ISPLAYED\" INTEGER NOT NULL ," + // 2: ISPLAYED
                "\"FILE__NAME\" TEXT," + // 3: FILE_NAME
                "\"TEAM2__NAME\" TEXT," + // 4: TEAM2_NAME
                "\"TEAM1__NAME\" TEXT," + // 5: TEAM1_NAME
                "\"TNAME\" TEXT," + // 6: TNAME
                "\"ET__DESCR__EN\" TEXT," + // 7: ET_DESCR_EN
                "\"ET__NAME\" TEXT," + // 8: ET_NAME
                "\"HANDICAP2\" REAL NOT NULL ," + // 9: HANDICAP2
                "\"HANDICAP1\" REAL NOT NULL ," + // 10: HANDICAP1
                "\"ODDS_2\" REAL NOT NULL ," + // 11: ODDS_2
                "\"ODDS__X\" REAL NOT NULL ," + // 12: ODDS_X
                "\"ODDS_1\" REAL NOT NULL ," + // 13: ODDS_1
                "\"USE__CLM__LEN\" INTEGER NOT NULL ," + // 14: USE_CLM_LEN
                "\"EVT__COMMENT__UNC\" TEXT," + // 15: EVT_COMMENT_UNC
                "\"LOTOS__CODE\" INTEGER NOT NULL ," + // 16: LOTOS_CODE
                "\"EVENT__TYPE\" INTEGER NOT NULL ," + // 17: EVENT_TYPE
                "\"TOURN__ID\" INTEGER NOT NULL ," + // 18: TOURN_ID
                "\"DRAW__ID\" INTEGER NOT NULL ," + // 19: DRAW_ID
                "\"DISPLAY__ORDER\" INTEGER NOT NULL ," + // 20: DISPLAY_ORDER
                "\"DISPLAY__DATE\" INTEGER," + // 21: DISPLAY_DATE
                "\"TEAM2__ID\" INTEGER NOT NULL ," + // 22: TEAM2_ID
                "\"TEAM1__ID\" INTEGER NOT NULL ," + // 23: TEAM1_ID
                "\"STATUS\" INTEGER NOT NULL ," + // 24: STATUS
                "\"ACTUAL__DATE\" INTEGER," + // 25: ACTUAL_DATE
                "\"SCD__DATE\" INTEGER," + // 26: SCD_DATE
                "\"BET__START__DATE\" INTEGER," + // 27: BET_START_DATE
                "\"EVENT__CODE\" INTEGER NOT NULL ," + // 28: EVENT_CODE
                "\"EVENT__ID\" INTEGER NOT NULL );"); // 29: EVENT_ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENT_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EventModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date LIVE_DT = entity.getLIVE_DT();
        if (LIVE_DT != null) {
            stmt.bindLong(2, LIVE_DT.getTime());
        }
        stmt.bindLong(3, entity.getISPLAYED());
 
        String FILE_NAME = entity.getFILE_NAME();
        if (FILE_NAME != null) {
            stmt.bindString(4, FILE_NAME);
        }
 
        String TEAM2_NAME = entity.getTEAM2_NAME();
        if (TEAM2_NAME != null) {
            stmt.bindString(5, TEAM2_NAME);
        }
 
        String TEAM1_NAME = entity.getTEAM1_NAME();
        if (TEAM1_NAME != null) {
            stmt.bindString(6, TEAM1_NAME);
        }
 
        String TNAME = entity.getTNAME();
        if (TNAME != null) {
            stmt.bindString(7, TNAME);
        }
 
        String ET_DESCR_EN = entity.getET_DESCR_EN();
        if (ET_DESCR_EN != null) {
            stmt.bindString(8, ET_DESCR_EN);
        }
 
        String ET_NAME = entity.getET_NAME();
        if (ET_NAME != null) {
            stmt.bindString(9, ET_NAME);
        }
        stmt.bindDouble(10, entity.getHANDICAP2());
        stmt.bindDouble(11, entity.getHANDICAP1());
        stmt.bindDouble(12, entity.getODDS_2());
        stmt.bindDouble(13, entity.getODDS_X());
        stmt.bindDouble(14, entity.getODDS_1());
        stmt.bindLong(15, entity.getUSE_CLM_LEN());
 
        String EVT_COMMENT_UNC = entity.getEVT_COMMENT_UNC();
        if (EVT_COMMENT_UNC != null) {
            stmt.bindString(16, EVT_COMMENT_UNC);
        }
        stmt.bindLong(17, entity.getLOTOS_CODE());
        stmt.bindLong(18, entity.getEVENT_TYPE());
        stmt.bindLong(19, entity.getTOURN_ID());
        stmt.bindLong(20, entity.getDRAW_ID());
        stmt.bindLong(21, entity.getDISPLAY_ORDER());
 
        java.util.Date DISPLAY_DATE = entity.getDISPLAY_DATE();
        if (DISPLAY_DATE != null) {
            stmt.bindLong(22, DISPLAY_DATE.getTime());
        }
        stmt.bindLong(23, entity.getTEAM2_ID());
        stmt.bindLong(24, entity.getTEAM1_ID());
        stmt.bindLong(25, entity.getSTATUS());
 
        java.util.Date ACTUAL_DATE = entity.getACTUAL_DATE();
        if (ACTUAL_DATE != null) {
            stmt.bindLong(26, ACTUAL_DATE.getTime());
        }
 
        java.util.Date SCD_DATE = entity.getSCD_DATE();
        if (SCD_DATE != null) {
            stmt.bindLong(27, SCD_DATE.getTime());
        }
 
        java.util.Date BET_START_DATE = entity.getBET_START_DATE();
        if (BET_START_DATE != null) {
            stmt.bindLong(28, BET_START_DATE.getTime());
        }
        stmt.bindLong(29, entity.getEVENT_CODE());
        stmt.bindLong(30, entity.getEVENT_ID());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EventModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date LIVE_DT = entity.getLIVE_DT();
        if (LIVE_DT != null) {
            stmt.bindLong(2, LIVE_DT.getTime());
        }
        stmt.bindLong(3, entity.getISPLAYED());
 
        String FILE_NAME = entity.getFILE_NAME();
        if (FILE_NAME != null) {
            stmt.bindString(4, FILE_NAME);
        }
 
        String TEAM2_NAME = entity.getTEAM2_NAME();
        if (TEAM2_NAME != null) {
            stmt.bindString(5, TEAM2_NAME);
        }
 
        String TEAM1_NAME = entity.getTEAM1_NAME();
        if (TEAM1_NAME != null) {
            stmt.bindString(6, TEAM1_NAME);
        }
 
        String TNAME = entity.getTNAME();
        if (TNAME != null) {
            stmt.bindString(7, TNAME);
        }
 
        String ET_DESCR_EN = entity.getET_DESCR_EN();
        if (ET_DESCR_EN != null) {
            stmt.bindString(8, ET_DESCR_EN);
        }
 
        String ET_NAME = entity.getET_NAME();
        if (ET_NAME != null) {
            stmt.bindString(9, ET_NAME);
        }
        stmt.bindDouble(10, entity.getHANDICAP2());
        stmt.bindDouble(11, entity.getHANDICAP1());
        stmt.bindDouble(12, entity.getODDS_2());
        stmt.bindDouble(13, entity.getODDS_X());
        stmt.bindDouble(14, entity.getODDS_1());
        stmt.bindLong(15, entity.getUSE_CLM_LEN());
 
        String EVT_COMMENT_UNC = entity.getEVT_COMMENT_UNC();
        if (EVT_COMMENT_UNC != null) {
            stmt.bindString(16, EVT_COMMENT_UNC);
        }
        stmt.bindLong(17, entity.getLOTOS_CODE());
        stmt.bindLong(18, entity.getEVENT_TYPE());
        stmt.bindLong(19, entity.getTOURN_ID());
        stmt.bindLong(20, entity.getDRAW_ID());
        stmt.bindLong(21, entity.getDISPLAY_ORDER());
 
        java.util.Date DISPLAY_DATE = entity.getDISPLAY_DATE();
        if (DISPLAY_DATE != null) {
            stmt.bindLong(22, DISPLAY_DATE.getTime());
        }
        stmt.bindLong(23, entity.getTEAM2_ID());
        stmt.bindLong(24, entity.getTEAM1_ID());
        stmt.bindLong(25, entity.getSTATUS());
 
        java.util.Date ACTUAL_DATE = entity.getACTUAL_DATE();
        if (ACTUAL_DATE != null) {
            stmt.bindLong(26, ACTUAL_DATE.getTime());
        }
 
        java.util.Date SCD_DATE = entity.getSCD_DATE();
        if (SCD_DATE != null) {
            stmt.bindLong(27, SCD_DATE.getTime());
        }
 
        java.util.Date BET_START_DATE = entity.getBET_START_DATE();
        if (BET_START_DATE != null) {
            stmt.bindLong(28, BET_START_DATE.getTime());
        }
        stmt.bindLong(29, entity.getEVENT_CODE());
        stmt.bindLong(30, entity.getEVENT_ID());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EventModel readEntity(Cursor cursor, int offset) {
        EventModel entity = new EventModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // LIVE_DT
            cursor.getLong(offset + 2), // ISPLAYED
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FILE_NAME
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TEAM2_NAME
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // TEAM1_NAME
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // TNAME
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ET_DESCR_EN
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ET_NAME
            cursor.getDouble(offset + 9), // HANDICAP2
            cursor.getDouble(offset + 10), // HANDICAP1
            cursor.getDouble(offset + 11), // ODDS_2
            cursor.getDouble(offset + 12), // ODDS_X
            cursor.getDouble(offset + 13), // ODDS_1
            cursor.getLong(offset + 14), // USE_CLM_LEN
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // EVT_COMMENT_UNC
            cursor.getLong(offset + 16), // LOTOS_CODE
            cursor.getLong(offset + 17), // EVENT_TYPE
            cursor.getLong(offset + 18), // TOURN_ID
            cursor.getLong(offset + 19), // DRAW_ID
            cursor.getLong(offset + 20), // DISPLAY_ORDER
            cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)), // DISPLAY_DATE
            cursor.getLong(offset + 22), // TEAM2_ID
            cursor.getLong(offset + 23), // TEAM1_ID
            cursor.getLong(offset + 24), // STATUS
            cursor.isNull(offset + 25) ? null : new java.util.Date(cursor.getLong(offset + 25)), // ACTUAL_DATE
            cursor.isNull(offset + 26) ? null : new java.util.Date(cursor.getLong(offset + 26)), // SCD_DATE
            cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)), // BET_START_DATE
            cursor.getLong(offset + 28), // EVENT_CODE
            cursor.getLong(offset + 29) // EVENT_ID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EventModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLIVE_DT(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setISPLAYED(cursor.getLong(offset + 2));
        entity.setFILE_NAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTEAM2_NAME(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTEAM1_NAME(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTNAME(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setET_DESCR_EN(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setET_NAME(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHANDICAP2(cursor.getDouble(offset + 9));
        entity.setHANDICAP1(cursor.getDouble(offset + 10));
        entity.setODDS_2(cursor.getDouble(offset + 11));
        entity.setODDS_X(cursor.getDouble(offset + 12));
        entity.setODDS_1(cursor.getDouble(offset + 13));
        entity.setUSE_CLM_LEN(cursor.getLong(offset + 14));
        entity.setEVT_COMMENT_UNC(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLOTOS_CODE(cursor.getLong(offset + 16));
        entity.setEVENT_TYPE(cursor.getLong(offset + 17));
        entity.setTOURN_ID(cursor.getLong(offset + 18));
        entity.setDRAW_ID(cursor.getLong(offset + 19));
        entity.setDISPLAY_ORDER(cursor.getLong(offset + 20));
        entity.setDISPLAY_DATE(cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)));
        entity.setTEAM2_ID(cursor.getLong(offset + 22));
        entity.setTEAM1_ID(cursor.getLong(offset + 23));
        entity.setSTATUS(cursor.getLong(offset + 24));
        entity.setACTUAL_DATE(cursor.isNull(offset + 25) ? null : new java.util.Date(cursor.getLong(offset + 25)));
        entity.setSCD_DATE(cursor.isNull(offset + 26) ? null : new java.util.Date(cursor.getLong(offset + 26)));
        entity.setBET_START_DATE(cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)));
        entity.setEVENT_CODE(cursor.getLong(offset + 28));
        entity.setEVENT_ID(cursor.getLong(offset + 29));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EventModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EventModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EventModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
