package com.odd.sportal.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.odd.sportal.model.GameLiveModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME_LIVE_MODEL".
*/
public class GameLiveModelDao extends AbstractDao<GameLiveModel, Long> {

    public static final String TABLENAME = "GAME_LIVE_MODEL";

    /**
     * Properties of entity GameLiveModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ID = new Property(1, long.class, "ID", false, "ID");
        public final static Property EVENT_ID = new Property(2, long.class, "EVENT_ID", false, "EVENT__ID");
        public final static Property GAME_ID = new Property(3, long.class, "GAME_ID", false, "GAME__ID");
        public final static Property STATUS = new Property(4, long.class, "STATUS", false, "STATUS");
        public final static Property START_DATE = new Property(5, java.util.Date.class, "START_DATE", false, "START__DATE");
        public final static Property END_DATE = new Property(6, java.util.Date.class, "END_DATE", false, "END__DATE");
        public final static Property EE = new Property(7, long.class, "EE", false, "EE");
        public final static Property GAME_DESCR = new Property(8, String.class, "GAME_DESCR", false, "GAME__DESCR");
        public final static Property GAME_ORDER = new Property(9, long.class, "GAME_ORDER", false, "GAME__ORDER");
        public final static Property HANDICAP1 = new Property(10, double.class, "HANDICAP1", false, "HANDICAP1");
        public final static Property CHART_NAME = new Property(11, String.class, "CHART_NAME", false, "CHART__NAME");
        public final static Property SPECIAL = new Property(12, long.class, "SPECIAL", false, "SPECIAL");
        public final static Property ISLIVE = new Property(13, long.class, "ISLIVE", false, "ISLIVE");
        public final static Property CHART_DESCR = new Property(14, String.class, "CHART_DESCR", false, "CHART__DESCR");
        public final static Property SC1 = new Property(15, long.class, "SC1", false, "SC1");
        public final static Property SC2 = new Property(16, long.class, "SC2", false, "SC2");
        public final static Property DISPLAY_FLAG = new Property(17, long.class, "DISPLAY_FLAG", false, "DISPLAY__FLAG");
        public final static Property GAME_NAME = new Property(18, String.class, "GAME_NAME", false, "GAME__NAME");
        public final static Property FC_TYPE = new Property(19, String.class, "FC_TYPE", false, "FC__TYPE");
    }


    public GameLiveModelDao(DaoConfig config) {
        super(config);
    }
    
    public GameLiveModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME_LIVE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID\" INTEGER NOT NULL ," + // 1: ID
                "\"EVENT__ID\" INTEGER NOT NULL ," + // 2: EVENT_ID
                "\"GAME__ID\" INTEGER NOT NULL ," + // 3: GAME_ID
                "\"STATUS\" INTEGER NOT NULL ," + // 4: STATUS
                "\"START__DATE\" INTEGER," + // 5: START_DATE
                "\"END__DATE\" INTEGER," + // 6: END_DATE
                "\"EE\" INTEGER NOT NULL ," + // 7: EE
                "\"GAME__DESCR\" TEXT," + // 8: GAME_DESCR
                "\"GAME__ORDER\" INTEGER NOT NULL ," + // 9: GAME_ORDER
                "\"HANDICAP1\" REAL NOT NULL ," + // 10: HANDICAP1
                "\"CHART__NAME\" TEXT," + // 11: CHART_NAME
                "\"SPECIAL\" INTEGER NOT NULL ," + // 12: SPECIAL
                "\"ISLIVE\" INTEGER NOT NULL ," + // 13: ISLIVE
                "\"CHART__DESCR\" TEXT," + // 14: CHART_DESCR
                "\"SC1\" INTEGER NOT NULL ," + // 15: SC1
                "\"SC2\" INTEGER NOT NULL ," + // 16: SC2
                "\"DISPLAY__FLAG\" INTEGER NOT NULL ," + // 17: DISPLAY_FLAG
                "\"GAME__NAME\" TEXT," + // 18: GAME_NAME
                "\"FC__TYPE\" TEXT);"); // 19: FC_TYPE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME_LIVE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GameLiveModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getID());
        stmt.bindLong(3, entity.getEVENT_ID());
        stmt.bindLong(4, entity.getGAME_ID());
        stmt.bindLong(5, entity.getSTATUS());
 
        java.util.Date START_DATE = entity.getSTART_DATE();
        if (START_DATE != null) {
            stmt.bindLong(6, START_DATE.getTime());
        }
 
        java.util.Date END_DATE = entity.getEND_DATE();
        if (END_DATE != null) {
            stmt.bindLong(7, END_DATE.getTime());
        }
        stmt.bindLong(8, entity.getEE());
 
        String GAME_DESCR = entity.getGAME_DESCR();
        if (GAME_DESCR != null) {
            stmt.bindString(9, GAME_DESCR);
        }
        stmt.bindLong(10, entity.getGAME_ORDER());
        stmt.bindDouble(11, entity.getHANDICAP1());
 
        String CHART_NAME = entity.getCHART_NAME();
        if (CHART_NAME != null) {
            stmt.bindString(12, CHART_NAME);
        }
        stmt.bindLong(13, entity.getSPECIAL());
        stmt.bindLong(14, entity.getISLIVE());
 
        String CHART_DESCR = entity.getCHART_DESCR();
        if (CHART_DESCR != null) {
            stmt.bindString(15, CHART_DESCR);
        }
        stmt.bindLong(16, entity.getSC1());
        stmt.bindLong(17, entity.getSC2());
        stmt.bindLong(18, entity.getDISPLAY_FLAG());
 
        String GAME_NAME = entity.getGAME_NAME();
        if (GAME_NAME != null) {
            stmt.bindString(19, GAME_NAME);
        }
 
        String FC_TYPE = entity.getFC_TYPE();
        if (FC_TYPE != null) {
            stmt.bindString(20, FC_TYPE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GameLiveModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getID());
        stmt.bindLong(3, entity.getEVENT_ID());
        stmt.bindLong(4, entity.getGAME_ID());
        stmt.bindLong(5, entity.getSTATUS());
 
        java.util.Date START_DATE = entity.getSTART_DATE();
        if (START_DATE != null) {
            stmt.bindLong(6, START_DATE.getTime());
        }
 
        java.util.Date END_DATE = entity.getEND_DATE();
        if (END_DATE != null) {
            stmt.bindLong(7, END_DATE.getTime());
        }
        stmt.bindLong(8, entity.getEE());
 
        String GAME_DESCR = entity.getGAME_DESCR();
        if (GAME_DESCR != null) {
            stmt.bindString(9, GAME_DESCR);
        }
        stmt.bindLong(10, entity.getGAME_ORDER());
        stmt.bindDouble(11, entity.getHANDICAP1());
 
        String CHART_NAME = entity.getCHART_NAME();
        if (CHART_NAME != null) {
            stmt.bindString(12, CHART_NAME);
        }
        stmt.bindLong(13, entity.getSPECIAL());
        stmt.bindLong(14, entity.getISLIVE());
 
        String CHART_DESCR = entity.getCHART_DESCR();
        if (CHART_DESCR != null) {
            stmt.bindString(15, CHART_DESCR);
        }
        stmt.bindLong(16, entity.getSC1());
        stmt.bindLong(17, entity.getSC2());
        stmt.bindLong(18, entity.getDISPLAY_FLAG());
 
        String GAME_NAME = entity.getGAME_NAME();
        if (GAME_NAME != null) {
            stmt.bindString(19, GAME_NAME);
        }
 
        String FC_TYPE = entity.getFC_TYPE();
        if (FC_TYPE != null) {
            stmt.bindString(20, FC_TYPE);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GameLiveModel readEntity(Cursor cursor, int offset) {
        GameLiveModel entity = new GameLiveModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // ID
            cursor.getLong(offset + 2), // EVENT_ID
            cursor.getLong(offset + 3), // GAME_ID
            cursor.getLong(offset + 4), // STATUS
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // START_DATE
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // END_DATE
            cursor.getLong(offset + 7), // EE
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // GAME_DESCR
            cursor.getLong(offset + 9), // GAME_ORDER
            cursor.getDouble(offset + 10), // HANDICAP1
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // CHART_NAME
            cursor.getLong(offset + 12), // SPECIAL
            cursor.getLong(offset + 13), // ISLIVE
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // CHART_DESCR
            cursor.getLong(offset + 15), // SC1
            cursor.getLong(offset + 16), // SC2
            cursor.getLong(offset + 17), // DISPLAY_FLAG
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // GAME_NAME
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // FC_TYPE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GameLiveModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setID(cursor.getLong(offset + 1));
        entity.setEVENT_ID(cursor.getLong(offset + 2));
        entity.setGAME_ID(cursor.getLong(offset + 3));
        entity.setSTATUS(cursor.getLong(offset + 4));
        entity.setSTART_DATE(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setEND_DATE(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setEE(cursor.getLong(offset + 7));
        entity.setGAME_DESCR(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGAME_ORDER(cursor.getLong(offset + 9));
        entity.setHANDICAP1(cursor.getDouble(offset + 10));
        entity.setCHART_NAME(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSPECIAL(cursor.getLong(offset + 12));
        entity.setISLIVE(cursor.getLong(offset + 13));
        entity.setCHART_DESCR(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSC1(cursor.getLong(offset + 15));
        entity.setSC2(cursor.getLong(offset + 16));
        entity.setDISPLAY_FLAG(cursor.getLong(offset + 17));
        entity.setGAME_NAME(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFC_TYPE(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GameLiveModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GameLiveModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GameLiveModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
